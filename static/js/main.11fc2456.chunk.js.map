{"version":3,"sources":["utils/Api.js","components/Card/index.js","components/Row/index.js","components/Container/index.js","components/Column/index.js","pages/Emlpoyees.js","components/Navbar/index.js","components/Footer/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Card","props","className","src","image","alt","firstname","lastName","firstName","age","phoneNumber","email","ssn","Row","fluid","Container","Column","Employees","state","allResults","allResultsParsed","results","handleSearchFN","e","queryFirstName","target","value","sortPeopleFN","handleSearchLN","queryLastName","sortPeopleLN","searchResults","filter","x","name","first","toLowerCase","includes","setState","last","Api","then","res","data","result","this","placeholder","onChange","map","employees","i","key","fullName","picture","large","dob","DOB","date","id","phone","Component","Navbar","to","window","location","pathname","Footer","Wrapper","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11fc2456.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// API random request to get 20 employees\nexport default {\n  findPeople: function() {\n      return axios.get('https://randomuser.me/api/?results=20&nat=us');\n  }\n}","import React from 'react';\nimport './style.css';\n\nfunction Card (props) {\n    return (\n        <div className=\"img\"> \n        <img className=\"card-img-top\" src={props.image} alt={`Our employee ${props.firstname} ${props.lastName}`}></img>\n        <div className=\"card-body\">\n    <h4 className=\"card-title\">{`${props.firstName} ${props.lastName}`}</h4>\n    <p className=\"card-text\">Age:{props.age}</p>\n    \n    <p className=\"card-text\">Phone:{props.phoneNumber}</p>\n    <p className=\"card-text\">Email:{props.email}</p>\n    <p className=\"card-text\">SSN:{props.ssn}</p>\n        </div>\n        </div>\n    )\n}\n\nexport default Card;\n","import React from \"react\";\n\nfunction Row(props) {\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Row;","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;","import React from \"react\";\n\nfunction Column(props) {\n  \n\n  return <div  {...props} />;\n}\n\nexport default Column;","import React, { Component } from \"react\";\nimport Api from \"../utils/Api\";\nimport Card from \"../components/Card\";\nimport Row from \"../components/Row\";\nimport Container from \"../components/Container\";\nimport Column from \"../components/Column\";\nimport \"./style.css\";\n\nclass Employees extends Component {\n  state = {\n    allResults: [],\n    allResultsParsed: [],\n    results: [],\n  };\n\n  componentDidMount() {\n    Api.findPeople().then((res) => {\n      this.setState({\n        allResults: res.data.results,\n        allResultsParsed: res.data.results,\n        results: res.data.result,\n      });\n    });\n  }\n\n  handleSearchFN = (e) => {\n    const queryFirstName = e.target.value;\n    this.sortPeopleFN(queryFirstName);\n  };\n  handleSearchLN = (e) => {\n    const queryLastName = e.target.value;\n    this.sortPeopleLN(queryLastName);\n  };\n  //Sorting employees by first name\n  sortPeopleFN = (value) => {\n    let searchResults = this.state.allResults.filter((x) => {\n      return x.name.first.toLowerCase().includes(value);\n    });\n    this.setState({\n      allResultsParsed: searchResults,\n    });\n  };\n  //Sorting employees by last name\n  sortPeopleLN = (value) => {\n    let searchResults = this.state.allResults.filter((x) => {\n      return x.name.last.toLowerCase().includes(value);\n    });\n    this.setState({\n      allResultsParsed: searchResults,\n    });\n  };\n\n  render() {\n    const results = this.state.allResultsParsed;\n    return (\n      <div>\n        <h1 className=\"text-center\">StraightLineUp</h1>\n        <form className=\"search-form form-inline\">\n          <div>\n            <input\n              className=\"employeeSearch\"\n              placeholder=\"Search by First Name\"\n              onChange={this.handleSearchFN}\n            />\n            <input\n              className=\"employeeSearch\"\n              placeholder=\"Search by Last Name\"\n              onChange={this.handleSearchLN}\n            />\n          </div>\n        </form>\n        <Container>\n          <Row>\n            {results.map((employees, i) => (\n              <Column key={i}>\n                <Card\n                  fullName={employees.name.first + employees.name.last}\n                  firstName={employees.name.first}\n                  lastName={employees.name.last}\n                  image={employees.picture.large}\n                  age={employees.dob.age}\n                  DOB={employees.dob.date}\n                  ssn={employees.id.value}\n                  email={employees.email}\n                  phoneNumber={employees.phone}\n                />\n              </Column>\n            ))}\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Employees;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar() {\n  return (\n    <nav className=\"navbar navbar-expand-lg\">\n      <Link className=\"navbar-brand\" to=\"/\">\n        Company Employee Directory\n      </Link>\n      <div>\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            <Link\n              to=\"/\"\n              className={\n                window.location.pathname === \"/\" || window.location.pathname === \"/about\"\n                  ? \"nav-link active\"\n                  : \"nav-link\"\n              }\n            >\n              About\n            </Link>\n          </li>\n          <li className=\"nav-item search\">\n            <Link\n              to=\"/all\"\n              className={window.location.pathname === \"/all\" ? \"nav-link active\" : \"nav-link\"}\n            >\n              All Employees\n            </Link>\n          </li>\n        </ul>\n      </div>\n      <div className=\"search-div\">\n        \n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <span id =\"footer\">2020 StraightLineUp &copy;</span>\n    </footer>\n  );\n}\n\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;","import React from 'react';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport Employees from './pages/Emlpoyees.js';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport Wrapper from './components/Wrapper';\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Navbar />\n        <Wrapper>\n          {/* <Route exact path=\"/\" component={About} />\n          <Route exact path=\"/about\" component={About} /> */}\n          <Route exact path=\"/all\" component={Employees} />\n        </Wrapper>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}